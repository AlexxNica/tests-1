#!/bin/bash
#
# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Description: This script will install all dependencies
# required by Clear Containers and metrics/tests.
#
# OS: ubuntu 16.04

# Currently these versions are tested by CI
KUBELET_VER="1.7.8-00"
KUBEADM_VER="1.7.8-00"
KUBECTL_VER="1.7.8-00"
RELEASE_KEY="Release.key"

# Add repository key
curl -OL "https://download.opensuse.org/repositories/home:clearcontainers:clear-containers-3/xUbuntu_16.04/$RELEASE_KEY"
apt-key add - < "$RELEASE_KEY"
apt-get update

if [ $? -eq 0 ]; then
	echo "Key added Successfully"
	rm -f "$RELEASE_KEY"
fi

# Add repositories and install runtime
echo "Installing Clear Containers"
sh -c "echo 'deb http://download.opensuse.org/repositories/home:/clearcontainers:/clear-containers-3/xUbuntu_16.04/ /' > /etc/apt/sources.list.d/cc-runtime.list"
apt-get update
apt-get install -y cc-runtime


# Install docker
echo "Installing docker"
apt-get install -y \
	apt-transport-https \
	ca-certificates \
	curl \
	software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
apt-key fingerprint 0EBFCD88

add-apt-repository \
	"deb [arch=amd64] https://download.docker.com/linux/ubuntu \
	$(lsb_release -cs) \
	stable"

apt-get update

# Install thin tools, they are required by devicemapper/docker
apt-get install -y thin-provisioning-tools

apt-get install -y docker-ce

# Install tests dependencies
apt-get install -y \
	bc \
	smem \
	apache2-utils \
	iperf

# Configure the Clear Containers runtime using devicemapper as
# storage driver
mkdir -p /etc/docker
mkdir -p /etc/lvm/profile

cat <<EOF | tee /etc/docker/daemon.json
{
"storage-driver": "devicemapper",
"storage-opts": [
        "dm.directlvm_device=/dev/sdc",
        "dm.thinp_percent=95",
        "dm.thinp_metapercent=1",
        "dm.thinp_autoextend_threshold=80",
        "dm.thinp_autoextend_percent=20",
        "dm.directlvm_device_force=true"
],
"default-runtime": "cc-runtime",
	"runtimes": {
		"cc-runtime": {
			"path": "/usr/bin/cc-runtime"
		}
	}
}
EOF

# Load devicemapper changes
systemctl daemon-reload

# Enable Clear Containers proxy
systemctl enable cc-proxy

# Restart Clear Containers services
systemctl restart docker
systemctl restart cc-proxy

# Update kernel
# echo deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe >> /etc/apt/sources.list
# apt-get update

# Install Kubernetes and kubeadm
apt-get install -y ebtables ethtool
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat << EOF > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
sudo -E apt install -y kubelet="$KUBELET_VER" kubeadm="$KUBEADM_VER" kubectl="$KUBECTL_VER"

# Create kubelet systemd service
cat <<EOF | tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
[Service]
Environment="KUBELET_KUBECONFIG_ARGS=--kubeconfig=/etc/kubernetes/kubelet.conf --require-kubeconfig=true"
Environment="KUBELET_SYSTEM_PODS_ARGS=--pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true"
Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
Environment="KUBELET_DNS_ARGS=--cluster-dns=10.96.0.10 --cluster-domain=cluster.local"
Environment="KUBELET_AUTHZ_ARGS=--authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt"
Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=/var/run/crio.sock --runtime-request-timeout=30m"
Environment="KUBELET_CADVISOR_ARGS=--cadvisor-port=0"
ExecStart=
ExecStart=/usr/bin/kubelet \
\$KUBELET_KUBECONFIG_ARGS \
\$KUBELET_SYSTEM_PODS_ARGS \
\$KUBELET_NETWORK_ARGS \
\$KUBELET_DNS_ARGS \
\$KUBELET_AUTHZ_ARGS \
\$KUBELET_CADVISOR_ARGS \
\$KUBELET_EXTRA_ARGS
EOF

# Clone, build and install CRI-O
add-apt-repository -y ppa:projectatomic/ppa
add-apt-repository -y ppa:alexlarsson/flatpak
add-apt-repository -y ppa:longsleep/golang-backports
apt-get update

# Install CRI-O dependencies
apt-get install -y \
	btrfs-tools \
	git \
	golang-go \
	libassuan-dev \
	libdevmapper-dev \
	libglib2.0-dev \
	libc6-dev \
	libgpgme11-dev \
	libgpg-error-dev \
	libseccomp-dev \
	libselinux1-dev \
	pkg-config \
	cri-o-runc \
	runc \
	skopeo \
	libostree-dev \
	skopeo-containers \
	go-md2man \
	make

git clone https://github.com/kubernetes-incubator/cri-o
pushd cri-o
git reset --hard v1.0.0
make
make install
make install.config
popd

# Add CRI-O systemd service
cat <<EOF | tee /etc/systemd/system/crio.service
[Unit]
Description=OCI-based implementation of Kubernetes Container Runtime Interface
Documentation=https://github.com/kubernetes-incubator/cri-o

[Service]
ExecStart=/usr/local/bin/crio -log-level debug
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Configure CRI-O
sed -i 's/storage_driver = ""/storage_driver = \"devicemapper"/' "/etc/crio/crio.conf"
sed -i 's/storage_option = \[/storage_option = \["dm.directlvm_device=\/dev\/sdd", "dm.thinp_percent=95", "dm.thinp_metapercent=1", "dm.thinp_autoextend_threshold=80", "dm.thinp_autoextend_percent=20", "dm.directlvm_device_force=true"/' "/etc/crio/crio.conf"
sed -i 's/runtime = "\/usr\/bin\/runc"/runtime = "\/usr\/lib\/cri-o-runc\/sbin\/runc"/' "/etc/crio/crio.conf"
sed -i 's/runtime_untrusted_workload = ""/runtime_untrusted_workload = "\/usr\/bin\/cc-runtime"/' "/etc/crio/crio.conf"
sed -i 's/default_workload_trust = "trusted"/default_workload_trust = "untrusted"/' "/etc/crio/crio.conf"
mkdir -p /etc/cni/net.d/

systemctl enable crio
systemctl start crio
